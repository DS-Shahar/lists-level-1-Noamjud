

public class homeWork {

	public static Node<Integer> q1(int []a )
	{
		if(a.length==0)
		{
			return null;
		}
		int i=0;
		Node<Integer> b = new Node<Integer> (a[0]);
		Node<Integer> c=b;
		
			for(i=1; i<a.length; i++)
			{
			c.setNext(new Node<Integer>(a[i]));
			c=c.getNext();
			}
		
		return b;
	}


public static void q2( Node<Integer> a)
	{
		 Node<Integer> current=a;
		 while (current!= null) {
		        System.out.println(current.getValue());  
		        current=current.getNext(); 
		    }
	}

	public static Node<Integer> q3()
	{	Node<Integer> a= null;
		Node<Integer> b= null;
		System.out.println("please enter a number");
		int answer=reader.nextInt();
		
		while(answer!=-1)
		{
			Node<Integer> newNode = new Node<Integer>(answer);
			
			if(a==null)
			{
				a=newNode;
				b=newNode;
			}
			else
			{
				b.setNext(newNode);
				b=newNode;
			}
			System.out.println("please enter a number");
			answer=reader.nextInt();
		}
		return a;
		
	}
public static void q4(Node<Integer> x)
	{
		Node<Integer> current=x;
		while (current!= null) {
			if(current.getValue()%2==0)
			{
			System.out.println(current.getValue());
			}   
			current=current.getNext(); 
	    }



    public static boolean q5(Node<Integer> x,int num)
	{
		Node<Integer> current=x;
		while (current!= null) {
			if(current.getValue()==num)
			{
			return true;
			}
			current=current.getNext(); 

			
	    }
		return false;
	}


 public Node removeAtPosition(int x)
{
        if (head == null) 
		return null;
        if (x == 1) 
	{
            head = head.next;
            return head;
        }
        
        Node current = head;
        int pos = 1;
        while (current != null && pos < x - 1) 
	{
            current = current.next;
            pos++;
        }
        
        if (current != null && current.next != null) 
	{
            current.next = current.next.next; 
        }
        
        return head;
    }	



public boolean areAllElementsInSecondList(Node L1, Node L2) 
{
        if (L1 == null) 
		return true;
        Node currentL2 = L2;
        while (currentL2 != null) 
	{
            if (currentL2.value == L1.value) 
		{
                	return areAllElementsInSecondList(L1.next, L2);
            	}
            currentL2 = currentL2.next;
        }
        
        return false;
    }



public void printElementsInBothLists(Node L1, Node L2) 
{
        if (L1 == null) 
		return;  
        Node currentL2 = L2;
        while (currentL2 != null) 
	{
            if (currentL2.value == L1.value) 
	    {
                System.out.println(L1.value); 
                break;  
            }
            currentL2 = currentL2.next;
        }
        printElementsInBothLists(L1.next, L2);
    }





public Node createIntersectionList(Node L1, Node L2) 
{
        if (L1 == null || L2 == null) 
		return null;
        Node resultHead = null, resultTail = null;
        while (L1 != null) 
	{
            Node currentL2 = L2;
            while (currentL2 != null) 
	    {
                if (currentL2.value == L1.value) 
		{
		    Node newNode = new Node(L1.value);
                    if (resultHead == null) 
		    {
                        resultHead = newNode;
                        resultTail = resultHead;
                    } 
		    else {
                        resultTail.next = newNode;
                        resultTail = resultTail.next;
                    }
                    break; 
                }
                currentL2 = currentL2.next;
            }
            L1 = L1.next;
        }
        return resultHead;
    }



 public Node removeElementsInL1FromL2(Node L1, Node L2)
 {
        if (L1 == null) 
		return null;
        Node currentL2 = L2;
        boolean foundInL2 = false;
        while (currentL2 != null) 
	{
            if (currentL2.value == L1.value) 
	    {
                foundInL2 = true;
                break;
            }
            currentL2 = currentL2.next;
        }
        if (foundInL2) 
	{
            L1 = L1.next;
        } 
	else 
	{
            L1.next = removeElementsInL1FromL2(L1.next, L2);  
        }
        return L1;
    }

public Node removeWithDummyNode(Node head, int value) 
{
        Node dummy = new Node(0);
        dummy.next = head;
        Node current = dummy;
        while (current.next != null) 
	{
            if (current.next.value == value) 
	    {
                current.next = current.next.next; 
                break;
            }
            current = current.next;
        }
        return dummy.next;
    }




	public static void main(String[] args) {
    public static Scanner reader=new Scanner(System.in);

		// TODO Auto-generated method stub

	}

}
